<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交互日志 - 智能车载AI助手</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <header class="glass-header">
        <div class="container">
            <h1 class="main-title">交互日志分析</h1>
        </div>
    </header>
    
    <nav class="glass-nav">
        <div class="container">
            <ul class="nav-list">
                <li><a href="{{ url_for('index') }}" class="nav-link">首页</a></li>
                <li><a href="{{ url_for('system_bp.logs') }}" class="nav-link active">交互日志</a></li>
                <li><a href="{{ url_for('auth.logout') }}" class="nav-link">退出登录</a></li>
            </ul>
        </div>
    </nav>
    
    <div class="container">
        <!-- 统计概览卡片 -->
        <div class="stats-overview glass-card fade-in">
            <h2 class="section-title">统计概览</h2>
            <div class="stats-grid" id="stats-grid">
                <div class="stat-card voice">
                    <div class="stat-icon">🎤</div>
                    <div class="stat-content">
                        <h3>语音交互</h3>
                        <div class="stat-number" id="voice-count">{{ stats.voice_count }}</div>
                        <div class="stat-label">次</div>
                    </div>
                </div>
                
                <div class="stat-card gesture">
                    <div class="stat-icon">👋</div>
                    <div class="stat-content">
                        <h3>手势交互</h3>
                        <div class="stat-number" id="gesture-count">{{ stats.gesture_count }}</div>
                        <div class="stat-label">次</div>
                    </div>
                </div>
                
                <div class="stat-card visual">
                    <div class="stat-icon">👁️</div>
                    <div class="stat-content">
                        <h3>视觉交互</h3>
                        <div class="stat-number" id="visual-count">{{ stats.visual_count }}</div>
                        <div class="stat-label">次</div>
                    </div>
                </div>
                
                <div class="stat-card system">
                    <div class="stat-icon">⚙️</div>
                    <div class="stat-content">
                        <h3>系统事件</h3>
                        <div class="stat-number" id="system-count">{{ stats.system_count or 0 }}</div>
                        <div class="stat-label">次</div>
                    </div>
                </div>
                
                <div class="stat-card total">
                    <div class="stat-icon">📊</div>
                    <div class="stat-content">
                        <h3>总交互数</h3>
                        <div class="stat-number" id="total-count">{{ stats.total }}</div>
                        <div class="stat-label">次</div>
                    </div>
                </div>
                
                <div class="stat-card success-rate">
                    <div class="stat-icon">✅</div>
                    <div class="stat-content">
                        <h3>成功率</h3>
                        <div class="stat-number" id="success-rate">{{ stats.success_rate }}%</div>
                        <div class="stat-label">准确度</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 日志表格 -->
        <div class="logs-container glass-card fade-in">
            <div class="logs-header">
                <h2 class="section-title">详细日志记录</h2>
                <div class="logs-controls">
                    <button class="btn btn-primary" onclick="refreshLogs()">
                        <span id="refresh-text">刷新日志</span>
                    </button>
                    <button class="btn btn-success" onclick="exportLogs()">导出CSV</button>
                    <select class="filter-select" onchange="filterLogs(this.value)" id="type-filter">
                        <option value="all">全部类型</option>
                        <option value="voice">语音交互</option>
                        <option value="gesture">手势交互</option>
                        <option value="visual">视觉交互</option>
                        <option value="system">系统事件</option>
                    </select>
                    <label class="auto-refresh-label">
                        <input type="checkbox" id="auto-refresh" onchange="toggleAutoRefresh()">
                        自动刷新 (<span id="countdown">30</span>s)
                    </label>
                </div>
            </div>
            
            <div class="loading-indicator" id="loading-indicator" style="display: none;">
                <div class="loading-spinner"></div>
                <span>正在加载...</span>
            </div>
            
            {% if logs %}
                <div class="table-container">
                    <table id="logs-table" class="logs-table">
                        <thead>
                            <tr>
                                <th>类型</th>
                                <th>动作</th>
                                <th>状态</th>
                                <th>详情</th>
                                <th>时间</th>
                            </tr>
                        </thead>
                        <tbody id="logs-tbody">
                            {% for log in logs %}
                            <tr class="log-row" data-type="{{ log.interaction_type }}">
                                <td>
                                    <span class="interaction-badge {{ log.interaction_type }}">
                                        {% if log.interaction_type == 'voice' %}
                                            🎤 语音
                                        {% elif log.interaction_type == 'gesture' %}
                                            👋 手势
                                        {% elif log.interaction_type == 'visual' %}
                                            👁️ 视觉
                                        {% elif log.interaction_type == 'system' %}
                                            ⚙️ 系统
                                        {% else %}
                                            🔧 其他
                                        {% endif %}
                                    </span>
                                </td>
                                <td class="action-cell">{{ log.action }}</td>
                                <td>
                                    {% if log.success %}
                                        <span class="status-badge success">✅ 成功</span>
                                    {% else %}
                                        <span class="status-badge failure">❌ 失败</span>
                                    {% endif %}
                                </td>
                                <td class="details-cell">
                                    <div class="details-preview" title="{{ log.details or '无详情' }}">
                                        {{ log.details or '无详情' }}
                                    </div>
                                </td>
                                <td class="time-cell">
                                    {{ log.created_at | datetime_format }}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                
                <!-- 分页控制 -->
                <div class="pagination-container">
                    <button class="btn btn-secondary" onclick="previousPage()" id="prev-btn">上一页</button>
                    <span class="page-info" id="page-info">第 1 页，共 {{ (logs|length / 10)|round|int + 1 }} 页</span>
                    <button class="btn btn-secondary" onclick="nextPage()" id="next-btn">下一页</button>
                </div>
            {% else %}
                <div class="empty-state">
                    <div class="empty-icon">📝</div>
                    <h3>暂无交互日志</h3>
                    <p>开始使用系统后，交互记录将在这里显示</p>
                    <a href="{{ url_for('index') }}" class="btn btn-primary">开始使用</a>
                </div>
            {% endif %}
        </div>
    </div>

    <script>
        let currentPage = 1;
        const rowsPerPage = 10;
        let filteredRows = [];
        let autoRefreshInterval = null;
        let countdown = 30;
        let countdownInterval = null;
        
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            initializeLogs();
            // 检查是否需要自动刷新
            const autoRefreshCheckbox = document.getElementById('auto-refresh');
            if (autoRefreshCheckbox.checked) {
                startAutoRefresh();
            }
        });
        
        // 初始化日志页面
        function initializeLogs() {
            updatePagination();
            showNotification('日志数据已加载', 'success', 2000);
        }
        
        // 刷新日志
        function refreshLogs() {
            const refreshBtn = document.querySelector('[onclick="refreshLogs()"]');
            const refreshText = document.getElementById('refresh-text');
            const loadingIndicator = document.getElementById('loading-indicator');
            
            // 显示加载状态
            refreshBtn.disabled = true;
            refreshText.textContent = '刷新中...';
            loadingIndicator.style.display = 'flex';
            
            fetch('{{ url_for("system_bp.refresh_logs") }}')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    updateLogsTable(data.logs);
                    updateStats(data.stats);
                    showNotification('日志已更新', 'success', 2000);
                } else {
                    throw new Error(data.error || '刷新失败');
                }
            })
            .catch(error => {
                console.error('刷新日志时出错:', error);
                showNotification('刷新失败: ' + error.message, 'error');
            })
            .finally(() => {
                // 恢复按钮状态
                refreshBtn.disabled = false;
                refreshText.textContent = '刷新日志';
                loadingIndicator.style.display = 'none';
            });
        }
        
        // 更新日志表格
        function updateLogsTable(logs) {
            const tbody = document.getElementById('logs-tbody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            logs.forEach(log => {
                const row = createLogRow(log);
                tbody.appendChild(row);
            });
            
            // 重新应用筛选
            const currentFilter = document.getElementById('type-filter').value;
            if (currentFilter !== 'all') {
                filterLogs(currentFilter);
            }
            
            // 更新分页
            currentPage = 1;
            updatePagination();
        }
        
        // 创建日志行
        function createLogRow(log) {
            const row = document.createElement('tr');
            row.className = 'log-row';
            row.setAttribute('data-type', log.interaction_type);
            
            // 获取交互类型显示
            let typeDisplay = '🔧 其他';
            switch(log.interaction_type) {
                case 'voice': typeDisplay = '🎤 语音'; break;
                case 'gesture': typeDisplay = '👋 手势'; break;
                case 'visual': typeDisplay = '👁️ 视觉'; break;
                case 'system': typeDisplay = '⚙️ 系统'; break;
            }
            
            const statusBadge = log.success ? 
                '<span class="status-badge success">✅ 成功</span>' : 
                '<span class="status-badge failure">❌ 失败</span>';
            
            row.innerHTML = `
                <td>
                    <span class="interaction-badge ${log.interaction_type}">
                        ${typeDisplay}
                    </span>
                </td>
                <td class="action-cell">${log.action}</td>
                <td>${statusBadge}</td>
                <td class="details-cell">
                    <div class="details-preview" title="${log.details || '无详情'}">
                        ${log.details || '无详情'}
                    </div>
                </td>
                <td class="time-cell">${formatDateTime(log.created_at)}</td>
            `;
            
            return row;
        }
        
        // 格式化日期时间
        function formatDateTime(dateString) {
            try {
                const date = new Date(dateString);
                return date.toLocaleString('zh-CN', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
            } catch (e) {
                return dateString || '未知时间';
            }
        }
        
        // 更新统计数据
        function updateStats(stats) {
            document.getElementById('voice-count').textContent = stats.voice_count;
            document.getElementById('gesture-count').textContent = stats.gesture_count;
            document.getElementById('visual-count').textContent = stats.visual_count;
            document.getElementById('system-count').textContent = stats.system_count || 0;
            document.getElementById('total-count').textContent = stats.total;
            document.getElementById('success-rate').textContent = stats.success_rate + '%';
        }
        
        // 导出日志
        function exportLogs() {
            const table = document.getElementById('logs-table');
            if (!table) return;
            
            let csv = '';
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
            csv += headers.join(',') + '\n';
            
            const rows = Array.from(table.querySelectorAll('tbody tr:not([style*="display: none"])'));
            rows.forEach(row => {
                const cells = Array.from(row.querySelectorAll('td')).map(td => {
                    return '"' + td.textContent.trim().replace(/"/g, '""') + '"';
                });
                csv += cells.join(',') + '\n';
            });
            
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `交互日志_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            
            showNotification('日志导出成功', 'success');
        }
        
        // 筛选日志
        function filterLogs(type) {
            const rows = document.querySelectorAll('.log-row');
            filteredRows = [];
            
            rows.forEach(row => {
                if (type === 'all' || row.dataset.type === type) {
                    filteredRows.push(row);
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            currentPage = 1;
            updatePagination();
            
            const filterText = type === 'all' ? '全部日志' : 
                              type === 'voice' ? '语音日志' : 
                              type === 'gesture' ? '手势日志' : 
                              type === 'visual' ? '视觉日志' : '系统日志';
            showNotification(`已筛选: ${filterText}`, 'info', 2000);
        }
        
        // 自动刷新功能
        function toggleAutoRefresh() {
            const checkbox = document.getElementById('auto-refresh');
            if (checkbox.checked) {
                startAutoRefresh();
            } else {
                stopAutoRefresh();
            }
        }
        
        function startAutoRefresh() {
            stopAutoRefresh(); // 确保清除之前的定时器
            
            countdown = 30;
            updateCountdown();
            
            // 倒计时
            countdownInterval = setInterval(() => {
                countdown--;
                updateCountdown();
                
                if (countdown <= 0) {
                    refreshLogs();
                    countdown = 30;
                }
            }, 1000);
        }
        
        function stopAutoRefresh() {
            if (countdownInterval) {
                clearInterval(countdownInterval);
                countdownInterval = null;
            }
            document.getElementById('countdown').textContent = '30';
        }
        
        function updateCountdown() {
            document.getElementById('countdown').textContent = countdown;
        }
        
        // 更新分页
        function updatePagination() {
            const visibleRows = filteredRows.length > 0 ? filteredRows : document.querySelectorAll('.log-row:not([style*="display: none"])');
            const totalPages = Math.ceil(visibleRows.length / rowsPerPage);
            
            // 显示当前页的行
            visibleRows.forEach((row, index) => {
                const pageNumber = Math.floor(index / rowsPerPage) + 1;
                if (pageNumber === currentPage) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            // 更新分页控件
            const pageInfo = document.getElementById('page-info');
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            
            if (pageInfo) {
                pageInfo.textContent = `第 ${currentPage} 页，共 ${totalPages} 页`;
            }
            
            if (prevBtn) {
                prevBtn.disabled = currentPage === 1;
            }
            
            if (nextBtn) {
                nextBtn.disabled = currentPage === totalPages || totalPages === 0;
            }
        }
        
        // 上一页
        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                updatePagination();
            }
        }
        
        // 下一页
        function nextPage() {
            const visibleRows = filteredRows.length > 0 ? filteredRows : document.querySelectorAll('.log-row:not([style*="display: none"])');
            const totalPages = Math.ceil(visibleRows.length / rowsPerPage);
            
            if (currentPage < totalPages) {
                currentPage++;
                updatePagination();
            }
        }
        
        // 通知函数
        function showNotification(message, type = 'info', duration = 3000) {
            // 创建通知元素
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                padding: 15px 20px;
                border-radius: 10px;
                color: white;
                font-weight: 500;
                max-width: 400px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;
            
            // 设置背景颜色
            switch (type) {
                case 'success':
                    notification.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                    break;
                case 'error':
                    notification.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                    break;
                case 'warning':
                    notification.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
                    break;
                default:
                    notification.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
            }
            
            notification.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" 
                            style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; margin-left: 15px;">×</button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // 显示动画
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            // 自动关闭
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, duration);
        }
        
        // 页面卸载时清理定时器
        window.addEventListener('beforeunload', function() {
            stopAutoRefresh();
        });
    </script>

    <style>
        /* CSS变量定义 - 确保颜色一致性 */
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #8b5cf6;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --text-primary: #1a202c;
            --text-secondary: #4a5568;
            --text-muted: #9ca3af;
            --bg-primary: #f9fafb;
            --bg-secondary: #ffffff;
            --border-color: #e5e7eb;
            --glass-bg: rgba(255, 255, 255, 0.25);
            --glass-border: rgba(255, 255, 255, 0.18);
            --shadow-light: 0 8px 32px rgba(31, 38, 135, 0.37);
            --backdrop-blur: blur(4px);
        }
        /* 统计概览样式 */
        .stats-overview {
            padding: 30px;
            margin-bottom: 30px;
        }

        .stats-grid {
            display: grid;
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
            /* 默认：超大屏幕6列（一行显示所有） */
            grid-template-columns: repeat(6, 1fr);
        }

        /* 大屏幕：3列2行 */
        @media (max-width: 1400px) {
            .stats-grid {
                grid-template-columns: repeat(3, 1fr);
                max-width: 900px;
            }
        }

        /* 中等屏幕：2列3行 */
        @media (max-width: 900px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
                max-width: 600px;
            }
        }

        /* 小屏幕：1列6行 */
        @media (max-width: 600px) {
            .stats-grid {
                grid-template-columns: 1fr;
                max-width: 350px;
            }
        }

        /* 平板横屏优化：确保3列布局在合适的尺寸下工作 */
        @media (min-width: 768px) and (max-width: 1024px) {
            .stats-grid {
                grid-template-columns: repeat(3, 1fr);
                max-width: 750px;
            }
        }

        .stat-card {
            background: linear-gradient(135deg, var(--glass-bg), rgba(255, 255, 255, 0.1));
            border: 1px solid var(--glass-border);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            min-height: 140px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            opacity: 0;
            transition: opacity 0.3s ease;
            border-radius: inherit;
        }

        .stat-card:hover::before {
            opacity: 1;
        }

        .stat-card.voice {
            background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
            color: white;
        }

        .stat-card.gesture {
            background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
            color: white;
        }

        .stat-card.visual {
            background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
            color: white;
        }

        .stat-card.system {
            background: linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%);
            color: white;
        }

        .stat-card.total {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
        }

        .stat-card.success-rate {
            background: linear-gradient(135deg, #55a3ff 0%, #003d82 100%);
            color: white;
        }

        .stat-icon {
            font-size: 2rem;
            margin-bottom: 10px;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
        }

        .stat-content h3 {
            font-size: 0.95rem;
            font-weight: 600;
            margin-bottom: 8px;
            opacity: 0.9;
        }

        .stat-number {
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 4px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
            font-weight: 500;
        }

        /* 日志容器样式 */
        .logs-container {
            padding: 30px;
        }

        .logs-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .logs-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 10px 15px;
            border: 2px solid var(--glass-border);
            border-radius: 10px;
            background: var(--glass-bg);
            backdrop-filter: var(--backdrop-blur);
            font-size: 1rem;
            cursor: pointer;
            color: var(--text-primary);
        }

        .auto-refresh-label {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
            color: var(--text-secondary);
            cursor: pointer;
        }

        .auto-refresh-label input[type="checkbox"] {
            margin: 0;
        }

        /* 加载指示器 */
        .loading-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 20px;
            color: var(--text-secondary);
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid var(--text-muted);
            border-top: 2px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* 表格样式 */
        .table-container {
            max-height: 600px;
            overflow-y: auto;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .logs-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 15px;
            overflow: hidden;
        }

        .logs-table th {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .logs-table td {
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            color: #2d3748;
            font-weight: 500;
        }

        .action-cell {
            color: #1a202c;
            font-weight: 600;
        }

        .details-cell {
            color: #4a5568;
        }

        .time-cell {
            color: #2d3748;
            font-weight: 500;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.9rem;
        }

        .log-row {
            transition: all 0.3s ease;
            cursor: pointer;
            background: #ffffff;
        }

        .log-row:hover {
            background: rgba(99, 102, 241, 0.08);
            transform: scale(1.01);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .log-row:hover .action-cell,
        .log-row:hover .time-cell {
            color: #1a202c;
        }

        .log-row:hover .details-preview {
            color: #2d3748;
            background: rgba(255, 255, 255, 0.8);
        }

        .interaction-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            color: white;
        }

        .interaction-badge.voice {
            background: linear-gradient(135deg, #fd79a8, #e84393);
        }

        .interaction-badge.gesture {
            background: linear-gradient(135deg, #fdcb6e, #e17055);
        }

        .interaction-badge.visual {
            background: linear-gradient(135deg, #00b894, #00a085);
        }

        .interaction-badge.system {
            background: linear-gradient(135deg, #a29bfe, #6c5ce7);
        }

        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-badge.success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .status-badge.failure {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .details-preview {
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            cursor: help;
            color: #4a5568;
            font-size: 0.95rem;
            padding: 4px 8px;
            background: rgba(0, 0, 0, 0.02);
            border-radius: 6px;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .details-preview:hover {
            background: rgba(0, 0, 0, 0.05);
            color: #2d3748;
        }

        /* 分页样式 */
        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 30px;
            padding: 20px;
        }

        .page-info {
            color: var(--text-secondary);
            font-weight: 500;
        }

        /* 空状态样式 */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-secondary);
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 20px;
        }

        .empty-state h3 {
            margin-bottom: 15px;
            color: var(--text-primary);
        }

        .empty-state p {
            margin-bottom: 30px;
            font-size: 1.1rem;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .logs-header {
                flex-direction: column;
                align-items: stretch;
            }

            .logs-controls {
                justify-content: center;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .table-container {
                font-size: 0.9rem;
            }

            .details-preview {
                max-width: 120px;
            }

            .logs-table th,
            .logs-table td {
                padding: 10px 8px;
            }
        }
    </style>
</body>
</html>